extensions [profiler]
;///////////////////////////VARIABLES///////////////////////////////////////
breed [bifidos bifido] ;define the Bifidobacteria breed
breed [desulfos desulfo] ;define the Desulfovibrio breed
breed [closts clost] ;define the Clostridia breed
breed [vulgats vulgat]; define the Bacteriodes Vulgatus breed
turtles-own [energy eaten excrete isSeed isStuck]
patches-own [antioxidants oxidants glucose FO lactose lactate inulin CS varA varB glucosePrev FOPrev lactosePrev
lactatePrev inulinPrev CSPrev avaCarbs]
globals [bifido-mult desulfo-mult clost-mult vulgat-mult trueAbsorption negCarb]
;///////////////////////////VARIABLES///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////DISPLAY-LABLELS///////////////////////////////////////
; Shows levels of energy on the turtles in the viewer
to display-labels
  ask turtles [set label ""]
  ask desulfos [set label round energy ]
  ask bifidos [set label round energy ]
  ask closts [set label round energy ]
end
;///////////////////////////DISPLAY-LABLELS///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////SETUP///////////////////////////////////////
to setup

  ;ensure the model starts from scratch
  clear-all

  ; Initializing the turtles and patches
  set-default-shape bifidos "bacteria"
  create-bifidos initial-number-bifidos [
    set color blue
    set size 1
    set label-color blue - 2
    set energy 100
    set eaten 0
    set excrete false
    set isSeed true
    set isStuck true
    setxy random-xcor random-ycor

  ]
  set-default-shape desulfos "bacteria"
  create-desulfos initial-number-desulfos [
    set color green
    set size 1
    set energy 100
    set eaten 0
    set excrete false
    set isSeed true
    set isStuck true
    setxy random-xcor random-ycor
  ]
  set-default-shape closts "bacteria"
  create-closts initial-number-closts [
    set color red
    set size 1
    set energy 100
    set eaten 0
    set excrete false
    set isSeed true
    set isStuck true
    setxy random-xcor random-ycor
  ]

  set-default-shape vulgats "bacteria"
  create-vulgats initial-number-vulgats [
    set color grey
    set size 1
    set energy 100
    set eaten 0
    set excrete false
    set isSeed true
    set isStuck true
    setxy random-xcor random-ycor
  ]
  ask patches [
    set glucose 0
    set FO 0
    set lactose 0
    set lactate 0
    set inulin 0
    set CS 0
    set glucosePrev 0
    set FOPrev 0
    set lactosePrev 0
    set lactatePrev 0
    set inulinPrev 0
    set CSPrev 0
    set varA 0
    set varB 0
  ]

  ; 0.723823204 is the weighted average immune response coefficient calculated for
  ; Healthy bacteria gut percentages. This allows the absorption to change due to
  ; bacteria populations, simulating immune response.
  set trueAbsorption absorption * (0.723823204 / ((0.8 * ((count desulfos) / (count turtles))) +
  (1 * ((count closts) / (count turtles)))+(1.2 * ((count vulgats) / (count turtles))) +
  (0.7 * ((count bifidos) / (count turtles)))))

  ; Setup for stop if negative carbs
  set negCarb false

  ;set time to zero
  reset-ticks
end

;///////////////////////////SETUP///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////GO///////////////////////////////////////
; This function determines the behavior at each time tick
to go
  ; Resetting all growth multipliers
  set desulfo-mult 1
  set vulgat-mult 1
  ifelse lysozyme-presence [
    set clost-mult 1.6
    set bifido-mult 1.05
  ][
    set clost-mult 1
    set bifido-mult 1
  ]

  ; 0.723823204 is the weighted average immune response coefficient calculated for
  ; Healthy bacteria gut percentages. This allows the absorption to change due to
  ; bacteria populations, simulating immune response.
  set trueAbsorption absorption * (0.723823204 / ((0.8 * ((count desulfos) / (count turtles))) +
  (1 * ((count closts) / (count turtles)))+(1.2 * ((count vulgats) / (count turtles))) +
  (0.7 * ((count bifidos) / (count turtles)))))

  ; Uncomment the following line to display energy on the turtles
  ; display-labels

  ;if not any? turtles [ stop ] ; stop if all turtles are dead DISABLED

  ; Modify the energy levels of each turtles and carbohydrate
  ; level of each patch
  ask patches [
    patchEat
    store-carbohydrates
  ]
  ask patches[
    make-carbohydrates
  ]
  bacteria-tick-behavior

  if ticks mod tickInflow = 0[
    inConc
  ]

  ; Increment time
  tick
  ; Stop if any population hits 0 or there are too many turtles
  if count turtles > 200000 [stop]
  ; Stop if negative number of carbs calculated
  if negCarb [stop]
end
;///////////////////////////GO///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////REPRODUCE-BIFIDOS///////////////////////////////////////:
; a growth multiplier. This multiplier is modified by the populations
; of nearby bacteria and directly impacts the probablility of reproducing.
to reproduce-bifidos
  ; Desulfovibrio population impact on Bifidobacteria growth rate (desulfos up, bifidos down)
  ifelse lysozyme-presence [
    set bifido-mult 1.05
  ][
    set bifido-mult 1
  ]
  set bifido-mult (bifido-mult / (1 - (0.81 * count desulfos-here / (count desulfos-here + count bifidos-here))))
  set bifido-mult (bifido-mult + (0.1 * count bifidos-here))
  set energy (energy - 5)
  if eaten != 0 [
  ; Reproduce based on a calculated probability
  if random-float (100 * bifido-mult / eaten) < bifidos-reproduce [
    hatch 1 [
      rt random-float 360 fd 1
      set energy 100
  ifelse random 100 <= stuckChance
      [set isStuck true]
      [set isStuck false]
    ]
  ]
  ]
  set eaten 0
end
;///////////////////////////REPRODUCE-BIFIDOS///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////REPRODUCE-DESULFOS///////////////////////////////////////
; Governs the growth of Desulfovibrio through
; a growth multiplier. This multiplier is modified by the populations
; of nearby bacteria and directly impacts the probablility of reroducing.
to reproduce-desulfos
  ; Desulfovibrio growth rate is affected by antioxidant (antioxidants up, desulfos down)
  set desulfo-mult 1
  if oxidants < antioxidants [
    ;set desulfo-mult (desulfo-mult + (0.5 * (1 - (oxidants / antioxidants))))
  ]

  ; Reproduce based on a calculated probability
  ;if random-float 100 < desulfos-reproduce / desulfo-mult [
  set energy (energy - 5)
  if eaten != 0 [
  if random-float (100 * desulfo-mult / eaten) < desulfos-reproduce [
    hatch 1 [
      rt random-float 360 fd 1
      set energy 100
      ifelse random 100 <= stuckChance
        [set isStuck true]
        [set isStuck false]
    ]
  ]
  ]
  set eaten 0
 end
;///////////////////////////REPRODUCE-DESULFOS///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////REPRODUCE-CLOSTS///////////////////////////////////////
; Reproduction of Clostridia is determined through
; a growth multiplier. This multiplier is modified by the populations
; of nearby bacteria and directly impacts the probablility of reproducing.
to reproduce-closts
  ; Bifidobacteria impacts the growth rate of Clostridia (as bifidos up, closts down)
    ifelse lysozyme-presence [
    set clost-mult 1.6
  ][
    set clost-mult 1
  ]
  ifelse count bifidos-here <= 10 [
  set clost-mult (clost-mult / ( 1 - 0.063 * (count bifidos-here) ) )
  ][ set clost-mult (clost-mult * 2.8)
  ]
  set energy (energy - 5)

  if eaten != 0 [
  ; Reproduce based on a calculated probability
  if random-float (100 * clost-mult / eaten) < closts-reproduce [
    hatch 1 [
      rt random-float 360 fd 1
      set energy 100
      ifelse random 100 <= stuckChance
        [set isStuck true]
        [set isStuck false]
    ]
  ]
  ]
  set eaten  0
end
;///////////////////////////REPRODUCE-CLOSTS///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////REPRODUCE-VULGATS///////////////////////////////////////
; Governs the growth of Vulgatus through
; a growth multiplier. This multiplier is modified by the populations
; of nearby bacteria and directly impacts the probablility of reroducing.
to reproduce-vulgats
  set vulgat-mult 1

  ;lysozymes do not affect this, it's gram-negative.

  ;Insert a thing here for how it relates to the other ones. We kind of need this
  set energy (energy - 5)
  if eaten != 0 [
  if random-float (100 * vulgat-mult / eaten) < vulgats-reproduce [
    hatch 1 [
      rt random-float 360 fd 1
      set energy 100
      ifelse random 100 <= stuckChance
        [set isStuck true]
        [set isStuck false]
    ]
  ]
  ]
  set eaten 0
 end
;///////////////////////////REPRODUCE-VULGATS///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////DEATH-BACTERIA///////////////////////////////////////
; Bifidobacteria die if below the energy threshold or if excreted
to death-bifidos
  if energy < 5[
    ;ifelse isSeed
    ;[set energy 100]
    die
  ]
  if excrete [die]
end

; Clostrida die if below the energy threshold or if excreted
to death-closts
  if energy < 5 [
    ;ifelse isSeed
    ;[set energy 100]
    die
  ]
  if excrete [die]
end

; Desulfovibrio die if below the energy threshold or if excreted
to death-desulfos
  if energy < 5 [
    ;ifelse isSeed
    ;[set energy 100]
    die
  ]
  if excrete [die]
end

; Vulgatus die if below energy threshold or if excreted
to death-vulgats
  if energy < 5 [
    ;ifelse isSeed
    ;[set energy 100]
    die
  ]
  if excrete [die]
end
;///////////////////////////DEATH-BACTERIA///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////PRODUCE-ANTIOXIDANTS///////////////////////////////////////
; Governs the production of antioxidants and
; the loss of oxidants
to produce-antioxidants
    if antioxidants < 10 [
      set antioxidants (antioxidants + 2)
    ]
    if oxidants > 2 [
      set oxidants (oxidants - 2)
    ]
end
;///////////////////////////PRODUCE-ANTIOXIDANTS///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////PRODUCE-OXIDANTS///////////////////////////////////////
; Governs the production of oxidants and
; the loss of antioxidants
to produce-oxidants
  if oxidants < 10 [
    set oxidants (oxidants + 1)
  ]
    if antioxidants > 1 [
      set antioxidants (antioxidants - 1)
    ]
    ; to account for bodies natural metabolism
;    ifelse oxidants > antioxidants [
;      set oxidants (oxidants * 0.8)
;      set antioxidants (antioxidants * 0.9)
;    ][
;      set oxidants (oxidants * 0.9)
;      set antioxidants (antioxidants * 0.8)
;    ]
end
;///////////////////////////PRODUCE-OXIDANTS///////////////////////////////////////



;///////////////////////////MAKE-CAROBOHYDRATES///////////////////////////////////////
; Runs through all the carbohydrates and makes them, and moves them.
to make-carbohydrates

  if ((inulin < 0) or (CS < 0) or (FO < 0) or (lactose < 0) or (lactate < 0) or (glucose < 0)) [
    print "ERROR! Patch reported negative carbohydrate. Problem with simulation leading to inaccurate results. Terminating Program."
    set negCarb true
    stop
  ]
  if (ticks mod (ceiling(1 / flowDist)) = 0)[
  let remainFactor 0
  if (flowDist < 1)[set remainFactor (1 - flowDist)]
  set inulin (inulin * remainFactor)
  set FO (FO * remainFactor)
  set lactose (lactose * remainFactor)
  set lactate (lactate * remainFactor)
  set glucose (glucose * remainFactor)
  set CS (CS * remainFactor)

  ifelse (pxcor < (min-pxcor + ceiling (flowDist)))[
    set inulin ((inulin) + (inFlowInulin * (1 - trueAbsorption)))
    set FO ((FO) + (inFlowFO * (1 - trueAbsorption)))
    set lactose ((lactose) + (inFlowLactose * (1 - trueAbsorption)))
    set lactate ((lactate) + (inFlowLactate * (1 - trueAbsorption)))
    set glucose ((glucose) + (inFlowGlucose * (1 - trueAbsorption)))
    set CS ((CS) + (inFlowCS * (1 - trueAbsorption)))
  ]
  [
    let added ((get-inulin (- (ceiling flowDist)) 0) * (1 - remainFactor))
    set inulin (inulin + (added * (1 - trueAbsorption)))

    set added ((get-FO (- (ceiling flowDist)) 0) * (1 - remainFactor))
    set FO (FO + (added * (1 - trueAbsorption)))

    set added ((get-lactose (- (ceiling flowDist)) 0) * (1 - remainFactor))
    set lactose (lactose + (added * (1 - trueAbsorption)))

    set added ((get-lactate (- (ceiling flowDist)) 0) * (1 - remainFactor))
    if (lactate + added) < 200[
      set lactate (lactate + (added * (1 - trueAbsorption)))
    ]

    set added ((get-glucose (- (ceiling flowDist)) 0) * (1 - remainFactor))
    set glucose (glucose + (added * (1 - trueAbsorption)))

    set added ((get-CS (- (ceiling flowDist)) 0) * (1 - remainFactor))
    if (CS + added) < 200[
      set CS (CS + (added * (1 - trueAbsorption)))
    ]
  ]
  ]
  set inulin ((round inulin))
  set FO ((round FO))
  set lactose ((round lactose))
  set lactate ((round lactate))
  set glucose ((round glucose))
  set CS ((round CS))
end
;///////////////////////////MAKE-CAROBOHYDRATES///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////STORE-CARBOHYDRATES///////////////////////////////////////
; Sets previous carbohydrate variables to current levels to allow for correct
; transfer on ticks
to store-carbohydrates
  set inulinPrev ((round inulin))
  set FOPrev ((round FO))
  set lactosePrev ((round lactose))
  set lactatePrev ((round lactate))
  set glucosePrev ((round glucose))
  set CSPrev ((round CS))
end
;///////////////////////////STORE-CARBOHYDRATES///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////GET-GLUCOSE///////////////////////////////////////
; Returns glucose value at passed coordinate
to-report get-glucose [target-patch-x-coord target-patch-y-coord]
    report [glucosePrev] of patch-at target-patch-x-coord target-patch-y-coord
end
;///////////////////////////GET-GLUCOSE///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////GET-LACTOSE///////////////////////////////////////
; Returns lactose value at passed coordinate
to-report get-lactose [target-patch-x-coord target-patch-y-coord]
    report [lactosePrev] of patch-at target-patch-x-coord target-patch-y-coord
end
;///////////////////////////GET-LACTOSE///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////GET-INULIN///////////////////////////////////////
; Returns inulin value at passed coordinate
to-report get-inulin [target-patch-x-coord target-patch-y-coord]
    report [inulinPrev] of patch-at target-patch-x-coord target-patch-y-coord
end
;///////////////////////////GET-INULIN///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////GET-LACTATE///////////////////////////////////////
; Returns lactate value at passed coordinate
to-report get-lactate [target-patch-x-coord target-patch-y-coord]
    report [lactatePrev] of patch-at target-patch-x-coord target-patch-y-coord
end
;///////////////////////////GET-LACTATE///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////GET-FO///////////////////////////////////////
; Returns FO value at passed coordinate
to-report get-FO [target-patch-x-coord target-patch-y-coord]
    report [FOPrev] of patch-at target-patch-x-coord target-patch-y-coord
end
;///////////////////////////GET-FO///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////GET-CS///////////////////////////////////////
; Returns CS value at passed coordinate
to-report get-CS [target-patch-x-coord target-patch-y-coord]
    report [CSPrev] of patch-at target-patch-x-coord target-patch-y-coord
end
;///////////////////////////GET-CS///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////BACTERIA-TICK-BEHAVIOR///////////////////////////////////////
; Determines the turtle behavior for this tick

to bacteria-tick-behavior
  ask bifidos [
    flowMoveB ;bifidos have no motility
    if ticks mod 4 = 0[ ;this line controls on what number tick that the death and reproduce happens
      death-bifidos
      reproduce-bifidos
        if(isStuck and (random 100 < stuckChance))[
          set isStuck true
        ]
        if(not isStuck and (random 100 > stuckChance))[
          set isStuck false
        ]
    ]
  ]

  ask desulfos [;controls the behavior for the desulfos bacteria
    flowMoveA
    bacteriaMove
    if ticks mod 5 = 0[
      death-desulfos
      reproduce-desulfos
      if(isStuck and (random 100 < stuckChance))[
          set isStuck true
      ]
      if(not isStuck and (random 100 > stuckChance))[
          set isStuck false
      ]
    ]
  ]

  ask closts [;controls the behavior for the closts
    flowMoveA
    bacteriaMove
    if ticks mod 1 = 0[
      death-closts
      reproduce-closts
      if(isStuck and (random 100 < stuckChance))[
          set isStuck true
      ]
      if(not isStuck and (random 100 > stuckChance))[
          set isStuck false
      ]
      reproduce-closts
    ]
  ]

  ask vulgats [;controls the behavior for the vulgats
    flowMoveB ;vulgats have no motility
    if ticks mod 5 = 0[
      death-vulgats
      reproduce-vulgats
      if(isStuck and (random 100 < stuckChance))[
          set isStuck true
      ]
      if(not isStuck and (random 100 > stuckChance))[
          set isStuck false
      ]
      reproduce-vulgats
    ]
  ]

end
;///////////////////////////BACTERIA-TICK-BEHAVIOR///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////bacteriaMove///////////////////////////////////////
; Defines random movement of turtles
to bacteriaMove
; rotates the orientation of the bacteria randomly within 180 degrees front-facing then moves forward the bacteria's motilDist
; if it would hit go through the simulation boundaries, sets excrete to true
  if (isStuck = false)[
    rt (50 - random 100)

    ifelse (can-move? motilDist)
      [fd motilDist]
      [set excrete true]
  ]

end
;///////////////////////////bacteriaMove///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////flowMoveA///////////////////////////////////////
to flowMoveA
;flow movement for the more mobile bacteria
;if xcor would pass the max-pxcor with movement, sets excrete to true
  if (isStuck = false)[
    ifelse (xcor + flowDist >= (max-pxcor + 0.5))
      [set excrete true]
      [set xcor (xcor + flowDist)]
  ]

end
;///////////////////////////flowMoveA///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////flowMoveB///////////////////////////////////////
to flowMoveB
;flow movement for the less mobile bacteria
;if xcor would pass the max-pxcor with movement, sets excrete to true
  if (isStuck = false)[
    ifelse (xcor + flowDist * lessMotilConst > (max-pxcor + 0.5))
      [set excrete true]
      [set xcor (xcor + flowDist * lessMotilConst)]
  ]

end
;///////////////////////////flowMoveB///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////inConc///////////////////////////////////////
to inConc
;controls the amount of each type of bacteria flowing in to the simulation

  create-bifidos inConcBifidos [
    set color blue
    set size 1
    set label-color blue - 2
    set energy 100
    set eaten 0
    set excrete false
    set isSeed false
    set isStuck false
    setxy min-pxcor - 0.5 random-ycor

  ]

  create-desulfos inConcDesulfos [
    set color green
    set size 1
    set energy 100
    set eaten 0
    set excrete false
    set isSeed false
    set isStuck false
    setxy min-pxcor - 0.5 random-ycor

  ]

  create-closts inConcClosts [
    set color red
    set size 1
    set energy 100
    set eaten 0
    set excrete false
    set isSeed false
    set isStuck false
    setxy min-pxcor - 0.5 random-ycor

  ]

  create-vulgats inConcVulgats [
    set color grey
    set size 1
    set energy 100
    set eaten 0
    set excrete false
    set isSeed false
    set isStuck false
    setxy min-pxcor - 0.5 random-ycor

  ]
end
;///////////////////////////inConc///////////////////////////////////////


to bactEat [carbNum]
;run this through a turtle with a carbNum parameter to have them try to eat the carb
;include the odd bifido lactate production
  if (carbNum = 10)[;CS
    ifelse (breed = desulfos)[
      set eaten (eaten + 1.5)
      ask patch-here [
        set CS (CS - 1)
		if (CS = 0){
			set avaCarbs remove 10 avaCarbs
		}
      ]
    ]
    [;else
      ;do nothing
    ]
  ]

  if (carbNum = 11)[;FO
    ifelse (breed = closts or breed = vulgats)[
      set eaten (eaten + 1)
      ask patch-here [
        set FO (FO - 1)
		if (FO = 0){
			set avaCarbs remove 11 avaCarbs
		}
      ]
    ]
    [;else
      if(breed = bifidos)[
        set eaten (eaten + 1.5)
        ask patch-here [
          set FO (FO - 1)
			if (FO = 0){
				set avaCarbs remove 11 avaCarbs
			}
        ]
        if (random-float 100 < bifido-lactate-production) [
          ask patch-here [
            set lactate (lactate + 1)
          ]
        ]
      ]
    ];end else
  ]

  if (carbNum = 12)[;GLUCOSE
    ifelse (breed = closts or breed = vulgats)[
      set eaten (eaten + 1.5)
      ask patch-here [
        set glucose (glucose - 1)
		if (glucose = 0){
			set avaCarbs remove 12 avaCarbs
		}
      ]
    ]
    [;else
      if (breed = bifidos) [
        set eaten (eaten + 1)
        ask patch-here [
        	set glucose (glucose - 1)
			if (glucose = 0){
				set avaCarbs remove 12 avaCarbs
			}
        ]
        if (random-float 100 < bifido-lactate-production) [
          ask patch-here [
            set lactate (lactate + 1)
          ]
        ]
      ]
    ];end else
  ]

  if (carbNum = 13)[;INULIN
    ifelse (breed = closts or breed = vulgats)[
      set eaten (eaten + 1)
      ask patch-here [
        set inulin (inulin - 1)
		if (inulin = 0){
			set avaCarbs remove 13 avaCarbs
		}
      ]
    ]
    [;else
      if (breed = bifidos) [
        set eaten (eaten + 1)
        ask patch-here [
          	set inulin (inulin - 1)
			if (inulin = 0){
				set avaCarbs remove 13 avaCarbs
			}
        ]
        if (random-float 100 < bifido-lactate-production) [
          ask patch-here [
            set lactate (lactate + 1)
          ]
        ]
      ]
    ];end else
  ]

  if (carbNum = 14)[;LACTATE
    ifelse (breed = (desulfos))[
      set eaten (eaten + 1.5)
      ask patch-here [
        set lactate (lactate - 1)
		if (lactate = 0){
			set avaCarbs remove 14 avaCarbs
		}
      ]
    ]
    [;else
      ;do nothing
    ]
  ]

  ifelse (carbNum = 15)[;LACTOSE
    ifelse (breed = closts or breed = vulgats)[
      ifelse (breed = closts)[
        set eaten (eaten + 1)
      ]
      [;else
        set eaten (eaten + 1.5)
      ];end else
      ask patch-here [
        set lactose (lactose - 1)
		if (lactose = 0){
			set avaCarbs remove 15 avaCarbs
		}
      ]
    ]
    [;else
      if (breed = bifidos) [
        set eaten (eaten + 1.5)
        ask patch-here [
          	set lactose (lactose - 1)
			if (lactose = 0){
				set avaCarbs remove 15 avaCarbs
			}
        ]
        if (random-float 100 < bifido-lactate-production) [
          ask patch-here [
            set lactate (lactate + 1)
          ]
        ]
      ]
    ];end else
  ]
  [;else
    ;do nothing
  ]
end

to patchEat
;run this on a ask patches to have them start the turtle eating process
  let allCarbs (list CS FO glucose inulin lactate lactose)
  set avaCarbs []

  ;initialize the two lists
  let hungryBact (turtles-here with [eaten < 3])
  let i 1
  while [i < (length(allCarbs))][
    if (item i allCarbs > 0) [
      set avaCarbs lput (i + 10) avaCarbs
    ]
    set i (i + 1)
  ]
  let tries 0
  ; do the eating till no carbs or not hungry
  while [(length(avaCarbs) > 0) and any? hungryBact and (tries < 1000)] [
    ;code here to randomly select a turtle from hungryBact and then ask it to run bactEat with a random carb from ava. list
    let carbNum one-of avaCarbs
    ask one-of hungryBact [
      bactEat(carbNum)
    ]
	;increase the tries counters
    set tries (tries + 1)
  ]

end

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
