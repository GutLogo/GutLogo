
to turtles-eat-glucose
  set varA 0
  set varB (glucose)
  while [varA < varB] [
    ifelse any? bifidos-here or any? closts-here or any? vulgats-here[
    ][ stop
    ]
    let varT (one-of turtles-here)
    if is-bifido? varT [
    ifelse glucose > 1 [
      set glucose (glucose - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-ok(varT)
      set varA (varA + 1)
      if random-float 100 < bifido-lactate-production [
          set lactate (lactate + 1)
      ]
    ]
    if is-clost? varT[
      ifelse glucose > 1 [
      set glucose (glucose - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-well(varT)
      set varA (varA + 1)
    ]
    if is-vulgat? vart [
      ifelse glucose > 1 [
      set glucose (glucose - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-well(varT)
      set varA (varA + 1)
    ]
  ]
end

to turtles-eat-lactate
  set varA 0
  set varB (lactate)
  while [varA < varB] [
    if any? desulfos-here = false [
     stop
    ]
    let varT (one-of desulfos-here)
    ifelse(lactate > 1)[
      set lactate (lactate - 1)
    ][stop]
    set varB (varB - 1)
    set varA (varA + 1)
    turtle-eating-well(varT)
  ]
end
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////TURTLES-EAT-INULIN///////////////////////////////////////
to turtles-eat-inulin
  set varA 0
  set varB (inulin)
  while [varA < varB] [
    ifelse any? bifidos-here or any? closts-here or any? vulgats-here[
    ][ stop
    ]
    let varT (one-of turtles-here)
    if is-bifido? varT [
    ifelse(inulin > 1)[
      set inulin (inulin - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-ok(varT)
      set varA (varA + 1)
      if random-float 100 < bifido-lactate-production [
          set lactate (lactate + 1)
      ]
    ]
    if is-clost? varT[
     ifelse(inulin > 1)[
      set inulin (inulin - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-ok(varT)
      set varA (varA + 1)
    ]
    if is-vulgat? vart [
      ifelse(inulin > 1)[
      set inulin (inulin - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-ok(varT)
      set varA (varA + 1)
    ]
  ]
end
;///////////////////////////TURTLES-EAT-INULIN///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////TURTLES-EAT-FO///////////////////////////////////////
to turtles-eat-FO
  set varA 0
  set varB (FO)
  while [varA < varB] [
    ifelse any? bifidos-here or any? closts-here or any? vulgats-here[
    ][ stop
    ]
    let varT (one-of turtles-here)
    if is-bifido? varT [
    ifelse( FO > 1 )[
      set FO (FO - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-well(varT)
      set varA (varA + 1)
      if random-float 100 < bifido-lactate-production [
          set lactate (lactate + 1)
      ]
    ]
    if is-clost? varT [
       ifelse( FO > 1 )[
      set FO (FO - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-ok(varT)
      set varA (varA + 1)
    ]
    if is-vulgat? varT [
       ifelse( FO > 1 )[
      set FO (FO - 1)
    ][ stop ]
      set varB (varB - 1)
      turtle-eating-ok(varT)
      set varA (varA + 1)
    ]
  ]
end
;///////////////////////////TURTLES-EAT-FO///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////TURTLES-EAT-LACTOSE///////////////////////////////////////
to turtles-eat-lactose
  set varA 0
  set varB (lactose)
  while [varA < varB] [
    ifelse any? bifidos-here or any? closts-here or any? vulgats-here[
    ][ stop ]
    let varT (one-of turtles-here)
    ;ask varT [

    ;]
    if is-bifido? varT [
    ifelse(lactose > 1)[
      set lactose (lactose - 1)
    ][stop]
    set varB (varB - 1)
    turtle-eating-well(varT)
    set varA (varA + 1)
    if random-float 100 < bifido-lactate-production [
        set lactate (lactate + 1)
    ]

    ]
    if is-clost? varT[
      ifelse(lactose > 1)[
      set lactose (lactose - 1)
    ][stop]
      set varB (varB - 1)
      turtle-eating-ok(varT)
      set varA (varA + 1)
    ]
    if is-vulgat? varT [
      ifelse(lactose > 1)[
      set lactose (lactose - 1)
    ][stop]
      set varB (varB - 1)
      turtle-eating-well(varT)
      set varA (varA + 1)
    ]
  ]
  end
;///////////////////////////TURTLES-EAT-LACTOSE///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////TURTLES-EAT-LACTATE///////////////////////////////////////
to turtles-eat-lactate
  set hungryBac (desulfos-here with [eaten < 3])
  while[(lactate) > 0 && count hungryBac > 0] [
    ask hungryBac[
      if (lactate>0)[
        set lactate (lactate - 1)
        set eaten (eaten + 1)
      ]
    ]
    set hungryBac (desulfos-here with [eaten < 3]
  ]
;///////////////////////////TURTLES-EAT-LACTATE///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////TURTLES-EAT-CS///////////////////////////////////////
to turtles-eat-cs
  set varA 0
  set varB (CS)
  while [varA < varB] [
    if any? desulfos-here = false [
      stop
    ]
    let varT (one-of desulfos-here)
    ifelse (CS > 1) [
      set CS (CS - 1)
    ][stop]
    set varB (varB - 1)
    set varA (varA + 1)
    turtle-eating-well(varT)
  ]
end
;///////////////////////////TURTLES-EAT-CS///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////TURTLES-LEFTOVERS////////////////////////////// /////////
;Disabled module
to turtle-leftovers
  ask bifidos-here [
    if eaten = 0 [
    ifelse lactose > 1 [
        set lactose (lactose - 1)
        set eaten 1.5
        if random-float 100 < bifido-lactate-production  [
          set lactate (lactate + 1)
        ]
      ] [

ifelse FO > 1 [
  set FO (FO - 1)
          set eaten 1.5
          if random-float 100 < bifido-lactate-production  [
            set lactate (lactate + 1)
        ]
         ] [
         ifelse  glucose > 1 [
           set glucose (glucose - 1)
           set eaten 1
           if random-float 100 < bifido-lactate-production  [
             set lactate (lactate + 1)
        ]
        ] [
        if inulin > 1 [
          set inulin (inulin - 1)
           set eaten 1
           if random-float 100 < bifido-lactate-production  [
             set lactate (lactate + 1)
        ]
        ]
        ]
         ]
      ]
      ]
  ]
    ask closts-here [
      if eaten = 0 [
      ifelse glucose > 1 [
        set glucose (glucose - 1)
        set eaten 1.5
        ] [
        ifelse inulin > 1 [
          set inulin (inulin - 1)
          set eaten 1
          ] [
          ifelse lactose > 1  [
            set lactose (lactose - 1)
            set eaten 1
            ] [
            if FO > 1 [
              set FO (FO - 1)
              set eaten 1
             ]
            ]
      ]
      ]
      ]
    ]
     ask desulfos-here [
       if eaten = 0 [
       ifelse lactate > 1 [
        set lactate (lactate - 1)
        set eaten 1.5
      ] [
        if CS > 1 [
          set CS (CS - 1)
          set eaten 1.5
         ]
         ]
      ]
     ]
     ask vulgats-here [
      if eaten = 0 [
      ifelse glucose > 1 [
        set glucose (glucose - 1)
        set eaten 1.5
        ] [
        ifelse lactose > 1 [
          set lactose (lactose - 1)
          set eaten 1.5
          ] [
          ifelse inulin > 1  [
            set inulin (inulin - 1)
            set eaten 1
            ] [
            if FO > 1 [
              set FO (FO - 1)
              set eaten 1
             ]
            ]
      ]
      ]
      ]
    ]
end
;///////////////////////////TURTLES-LEFTOVERS///////////////////////////////////////

;///////////////////////////TURTLES-EATING-WELL///////////////////////////////////////
to turtle-eating-well [agent]
  ask agent [
    if eaten < 3 [
    set eaten (eaten + 1.5)
    ]
  ]
end
;///////////////////////////TURTLES-EATING-WELL///////////////////////////////////////

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;///////////////////////////TURTLES-EATING-OK///////////////////////////////////////
to turtle-eating-ok [agent]
  ask agent [
    if eaten < 3 [
    set eaten (eaten + 1)
    ]
  ]
end
;///////////////////////////TURTLES-EATING-OK///////////////////////////////////////

